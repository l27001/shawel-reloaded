import datetime, re, timeit, json

from config import vk_info
from methods import Methods
from exceptions import *

class Commands:

    def __init__(self, response):
        today = datetime.datetime.now()
        if(DEBUG == True):
            extime = timeit.default_timer()
            print(today.strftime("%H:%M:%S %d.%m.%Y") + ": " + str(response))
        obj = response['object']['message']
        client_info = response['object']['client_info']
        if 'reply_message' in obj:
            replid = obj['reply_message']['from_id']
        else:
            replid = ''
        from_id = obj['from_id']
        chat_id = obj['peer_id']
        text = obj['text']
        if(from_id < 1 or text == ''):
            return None
        user = Methods.users_get(from_id)
        user = user[0]['last_name']+" "+user[0]['first_name']
        if(chat_id == from_id):
            who = f"–æ—Ç {user}[{from_id}]"
        else:
            who = f"–≤ {chat_id} –æ—Ç {user}[{from_id}]"
        userinfo = Mysql.query("SELECT * FROM users WHERE vkid=%s", (from_id))
        if(userinfo == None):
            Mysql.query("INSERT INTO users (`vkid`) VALUES (%s)", (from_id))
            userinfo = Mysql.query("SELECT * FROM users WHERE vkid=%s", (from_id))
        tolog = text.replace("\n",r" \n ")
        Methods.log("Message", f"'{tolog}' {who}")
        if('payload' in obj):
            try:
                obj['payload'] = json.loads(obj['payload'])
                if('command' in obj['payload'] and obj['payload']['command'] == "internal_command"):
                    inline = Methods.check_keyboard(client_info['inline_keyboard'])
                    if(obj['payload']['action']['type'] == "intent_unsubscribe"):
                        Mysql.query(f"UPDATE users SET subscribe='0' WHERE vkid='{from_id}'")
                        Methods.send(from_id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/—Ä–∞—Å—Å—ã–ª–∫–∞'", keyboard=Methods.construct_keyboard(b1=Methods.make_button(type_="intent_subscribe",peer_id=from_id,intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline=inline))
                    elif(obj['payload']['action']['type'] == "intent_subscribe"):
                        Mysql.query(f"UPDATE users SET subscribe='1' WHERE vkid='{from_id}'")
                        Methods.send(from_id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/—Ä–∞—Å—Å—ã–ª–∫–∞'", keyboard=Methods.construct_keyboard(b2=Methods.make_button(type_="intent_unsubscribe",peer_id=from_id,intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline=inline))
                    return None
            except TypeError: pass
            userinfo.update({'payload':obj['payload']})
        text = text.split(' ')
        if(re.match(rf"\[(club|public){vk_info['groupid']}\|(@|\*){scrname}\]", text[0])):
            text.pop(0)
        elif(chat_id > 2000000000):
            chatinfo = Mysql.query(f"SELECT * FROM chats WHERE id = '{chat_id}' LIMIT 1")
            if(chatinfo == None):
                Mysql.query(f"INSERT INTO chats (`id`) VALUES ({chat_id})")
                chatinfo = Mysql.query(f"SELECT * FROM chats WHERE id = '{chat_id}' LIMIT 1")
            userinfo.update({'chatinfo':chatinfo})
            if(text[0][0] != '/'):
                return None
        text[0] = text[0].lower()
        text[0] = text[0].replace('/','')
        userinfo.update({'replid':replid,'chat_id':chat_id, 'from_id':from_id, 'attachments':obj['attachments'], 'inline':client_info['inline_keyboard']})
        try:
            if(cmds.get(text[0]) == None):
                raise CommandNotFound
                return None
            else:
                cmds[text[0]](userinfo, text[1:])
        except CommandNotFound as e:
            if(DEBUG):
                Methods.log("Message", e.__str__())
            if(chat_id < 2000000000):
                Methods.send(chat_id, "üëéüèª –ù–µ –ø–æ–Ω—è–ª.")
        except Exception as e:
            Methods.log("ERROR", f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. {e}")
            Methods.send(chat_id, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @l27001", attachment="photo-**ID**_273680258")
            raise e
        if(DEBUG == True):
            Methods.log("Debug", f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timeit.default_timer()-extime}")
 
    def info(userinfo, text):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º."""
        if(len(text) < 1):
            text.insert(0, str(userinfo['from_id']))
        t = re.findall(r'\[.*\|', text[0])
        try:
            t = t[0].replace("[", "").replace("|", "")
        except IndexError:
            t = text[0]
        if('payload' in userinfo):
            t = userinfo['payload']
        try:
            uinfo = Methods.users_get(t)
        except Exception as e:
            if(e.code == 113):
                Methods.send(userinfo['chat_id'], "‚ö† Invalid user_id")
                return 0
        name = f"[id{uinfo[0]['id']}|{uinfo[0]['last_name']} {uinfo[0]['first_name']}]"
        uinfo = Mysql.query("SELECT * FROM users WHERE vkid=%s", (uinfo[0]['id']))
        if(uinfo == None):
            Methods.send(userinfo['chat_id'], "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return 0
        if(uinfo['subscribe'] == 0):
            subscribe = '–†–∞—Å—Å—ã–ª–∫–∞: –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω'
        else:
            subscribe = '–†–∞—Å—Å—ã–ª–∫–∞: –ü–æ–¥–ø–∏—Å–∞–Ω'
        if(userinfo['chat_id'] != userinfo['from_id']):
            ch = f"Chat-ID: {userinfo['chat_id']}"
        else:
            ch = ''
        keyb = Methods.construct_keyboard(b1=Methods.make_button(label="/—Ä–∞—Å—Å—ã–ª–∫–∞", color="primary"))
        Methods.send(userinfo['chat_id'], f"–ò–º—è: {name}\nVKID: {uinfo['vkid']}\nDostup: {uinfo['dostup']}\n{subscribe}\n{ch}", keyboard=keyb, disable_mentions=1)

    def raspisanie(userinfo, text):
        """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        post = Mysql.query("SELECT rasp_post FROM vk")['rasp_post']
        if(userinfo['subscribe'] == 1 or userinfo['chat_id'] > 2000000000):
            text = "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
            keyb = ''
        else:
            text = "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
            keyb = Methods.construct_keyboard(b1=Methods.make_button(type_="intent_subscribe",peer_id=userinfo['from_id'],intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline=Methods.check_keyboard(userinfo['inline']))
        if(post == ''):
            text = "–†–∞–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç."
        Methods.send(userinfo['chat_id'], text, f"wall-{vk_info['groupid']}_{post}", keyboard=keyb)

    def zvonki(userinfo, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"""
        post = Mysql.query("SELECT zvonki_post FROM vk")['zvonki_post']
        if(post != ''):
            text = "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:"
        else:
            text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ—Ç."
        Methods.send(userinfo['chat_id'], text, f"wall-{vk_info['groupid']}_{post}")

    def subscribe(userinfo, text):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if(userinfo['chat_id'] == userinfo['from_id']):
            if(userinfo['subscribe'] == 0):
                Methods.send(userinfo['chat_id'], "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Methods.construct_keyboard(b1=Methods.make_button(type_="intent_subscribe",peer_id=userinfo['from_id'],intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline=Methods.check_keyboard(userinfo['inline'])))
            else:
                Methods.send(userinfo['chat_id'], "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Methods.construct_keyboard(b2=Methods.make_button(type_="intent_unsubscribe",peer_id=userinfo['from_id'],intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline=Methods.check_keyboard(userinfo['inline'])))
        else:
            if(userinfo['chatinfo']['subscribe'] != 1):
                Mysql.query("UPDATE `chats` SET subscribe=1 WHERE id=%s", (userinfo['chat_id']))
                Methods.send(userinfo['chat_id'], "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")
            else:
                Mysql.query("UPDATE `chats` SET subscribe=0 WHERE id=%s", (userinfo['chat_id']))
                Methods.send(userinfo['chat_id'], "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")

    def help(userinfo, text):
        """–ü–æ–º–æ—â—å"""
        out = []
        prev = None
        for i,n in cmds.items():
            if(n == prev):
                continue
            prev = n
            if(n.__doc__ == None or n.__doc__ == ''):
                continue
            else:
                doc = n.__doc__
            out.append(f'/{i} - {doc}')
        Methods.send(userinfo['chat_id'], '\n'.join(out))

cmds = {
    'info':Commands.info, '–∏–Ω—Ñ–æ':Commands.info,
    'help':Commands.help, '–ø–æ–º–æ—â—å':Commands.help, '—Ö–µ–ª–ø':Commands.help,
    '—Ä–∞—Å—Å—ã–ª–∫–∞':Commands.subscribe, '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':Commands.subscribe, '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è':Commands.subscribe,
    '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':Commands.raspisanie,
    '–∑–≤–æ–Ω–∫–∏':Commands.zvonki
}
